x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: airflow-custom:3.0.3
  # build: .
  networks:
    - this-network
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:password@database-server:5432/dbairflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    database-server:
      condition: service_healthy


services:
  database-server:
    image: "postgres:15-alpine"
    container_name: database-server
    restart: always
    networks:
      - this-network
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      # - POSTGRES_DB=dbcore,dbmlflow,dbmetaflow
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "log_statement=none", "-c", "wal_level=logical"]
    volumes:
      - database-volume:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: database-pgadmin
    networks:
      - this-network
    ports:
      - 5433:80
    # env_file:
      # - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=password
      - PGADMIN_CONFIG_SERVER_MODE=False
    depends_on:
      - database-server
    volumes:
      - pgadmin-volume:/var/lib/pgadmin/

  dbcore-api:
    image: dbcore-server:latest
    container_name: dbcore-api
    networks:
      - this-network
    ports:
      - "8000:80"
    environment:
      - DATABASE_SERVER=postgresql
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST=database-server
      - POSTGRES_PORT=5432
      - DATABASE_NAME=dbcore
    depends_on:
      - database-server
    
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "10000:9000"   # API port
      - "10001:9001"   # Console UI
    networks:
      - this-network
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    volumes:
      - minio-volume:/data

  create-buckets:
    image: minio/mc
    container_name: create-buckets
    depends_on:
      - minio
    entrypoint: >
      sh -c "
        mc alias set myminio http://minio:9000 admin password;
        mc mb --ignore-existing myminio/mlflow-artifacts;
        mc mb --ignore-existing myminio/metaflowstore;
        mc mb --ignore-existing myminio/snapshots;
        mc policy set public myminio/mlflow-artifacts;
        exit 0;
      "
    networks:
      - this-network

  mlflow-server:
    image: ghcr.io/mlflow/mlflow
    container_name: mlflow-server
    depends_on:
      - minio
      - create-buckets
      - database-server
    ports:
      - "5000:5000"
    volumes:
      - mlflow-volume:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - this-network
    command: sh -c "pip install boto3 psycopg2-binary; mlflow server --backend-store-uri postgresql://admin:password@database-server:5432/dbmlflow --default-artifact-root s3://mlflow-artifacts --host 0.0.0.0 --port 5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_TRACKING_URI: http://host.docker.internal:5000
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password

  # metaflow-metadata-service:
  #   image: netflixoss/metaflow_metadata_service:v2.4.3
  #   container_name: metaflow-metadata-service
  #   depends_on:
  #     - database-server
  #   networks:
  #     - this-network
  #   restart: always
  #   ports:
  #     - "8081:8080"
  #     - "8082:8082"
  #   environment:
  #     - MF_METADATA_DB_HOST=database-server
  #     - MF_METADATA_DB_PORT=5432
  #     - MF_METADATA_DB_USER=admin
  #     - MF_METADATA_DB_PSWD=password
  #     - MF_METADATA_DB_NAME=dbmetaflow
  #     - MF_MIGRATION_ENDPOINTS_ENABLED=0
  #     - MF_METADATA_PORT=8080
  #     - MF_METADATA_HOST=0.0.0.0
  #     - MF_MIGRATION_PORT=8082
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  # metaflow-ui-server:
  #   image: netflixoss/metaflow_metadata_service:v2.4.3
  #   container_name: metaflow-ui-server
  #   restart: always
  #   depends_on:
  #     - database-server
  #     - metaflow-metadata-service
  #     - minio
  #     - create-buckets
  #   networks:
  #     - this-network
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     - MF_METADATA_DB_HOST=database-server
  #     - MF_METADATA_DB_PORT=5432
  #     - MF_METADATA_DB_USER=admin
  #     - MF_METADATA_DB_PSWD=password
  #     - MF_METADATA_DB_NAME=dbmetaflow
  #     - MF_UI_METADATA_PORT=8083
  #     - MF_UI_METADATA_HOST=0.0.0.0
  #     - UI_ENABLED=1
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - FEATURE_ARTIFACT_SEARCH=1
  #     - FEATURE_ARTIFACT_TABLE=1
  #     - METAFLOW_DEFAULT_DATASTORE=s3
  #     - METAFLOW_DATASTORE_SYSROOT_S3=s3://metaflowstore/Datastore
  #     - METAFLOW_S3_ENDPOINT_URL=http://minio:9000
  #   command: ["/opt/latest/bin/python3", "-m", "services.ui_backend_service.ui_server"]
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    container_name: airflow-dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    container_name: airflow-apiserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow-init
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"


networks:
  this-network:
    name: this-network

volumes:
  database-volume:
    name: database-volume
  pgadmin-volume:
    name: pgadmin-volume
  minio-volume:
    name: minio-volume
  mlflow-volume:
    name: mlflow-volume